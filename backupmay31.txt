import { LightningElement,api,track,wire } from 'lwc';
import getContacts from '@salesforce/apex/SsnValidationController.getContacts';
import { createRecord } from 'lightning/uiRecordApi'; 
import getFirstPicklistValues from '@salesforce/apex/ObjectNameController.getPicklistValues';
import getSecondPicklistValues from '@salesforce/apex/myvendorpicklistvalues.getPicklistValues';
import insertElectionRecords from '@salesforce/apex/ElectionDataHandler.insertElectionRecords';
import getPlantype from '@salesforce/apex/AccountController.getPlantype';
import CONTACT_OBJECT from '@salesforce/schema/Contact';
import saveSignatureData from '@salesforce/apex/ContactController.saveSignatureData';
//import ELECTION_OBJECT from '@salesforce/schema/Election_Object__c';
import { ShowToastEvent } from 'lightning/platformShowToastEvent'; 
export default class TabWithNavigation extends LightningElement {
 
 @track contributionType = 'amount';
// Declare a property to track whether all inputs are filled
isInputsFilled = false;

     @track formattedSSN = '';
     @track error = '';

     // Added for sign
     @track showPopup = false; 
     ctx;
     drawing = false;
     @track currentDate;
     signatureData = null;
    
    // @track showPercentage = false; // Initialize to false by default

    //@track disableTabSwitch = true;
    @track contributionAmount;
    @track contributionPercentage;
    @track Totalcontamount = 0; 
    @track accordionItems = [];
    //@track inputDataArray =[];
    //@track selecedCheckboxes = [];
    allowMultipleSectionsOpen = true; // Set to false if you want only one section to be open at a time
    @api planNumber;
    account;
    // Define a property to store the created contact ID
    contactId;
    picklistValues = [];    
    @track selectedValues = [];

   //constructor() {
   //    super();
   //    this.selectedValues = []; // Initialize selectedValues array
   //    this.accordionItems = [];
   //}

    //value = [];
    @track firstName;
    @track lastName;
    @track middleName;
    @track birthdate;
    @track ssn ;
   // @track planId; 
    @track email;
    @track phone;
    @track mailingStreet;
    @track mailingCity;
    @track mailingState;
    @track mailingPostalCode;
    @track mailingCountry; 

    //handleTabClick(event) {
    //     if (this.disableTabSwitch) {
    //         event.stopPropagation();
    //         event.preventDefault();
    //     }
    //    
    //}

    handleChange1(event) {
       this.isChecked1 = event.target.checked;
    }
//
   // getImage(value) {
   //     // Return image URL based on value
   // }
//
   // isChecked(value) {
   //     // Return true if value is checked
   // }

   // handlePlanNumberChange(event) {
   //    this.selecedCheckboxes = event.detail.value; 
   //    
   //}

   get contributionOptions() {
    return [
        { label: 'Amount', value: 'amount' },
        { label: 'Percent', value: 'percent' }
    ];
}

// Handler function for contribution type change
handleContributionTypeChange(event) {
    this.contributionType = event.detail.value;
    console.log("contributionType", this.contributionType);
}


  // ssn validation start 
   @wire(getContacts, { lastName: '$lastName', dob: '$birthdate', ssn: '$ssn' })
wiredContacts({ error, data }) {
    if (data) {
        const contacts = data;
        if (contacts && contacts.length > 0 && this.isInputsFilled) {
            const hasMatchingContact = contacts.some(contact => {
                if (this.ssn) {
                    const lastFiveDigits = this.ssn.substr(this.ssn.length - 4);
                    return contact.LastName === this.lastName && contact.Birthdate === this.birthdate && contact.SSN__c.endsWith(lastFiveDigits);
                }
            });
            if (hasMatchingContact) {
                this.error = 'Contact already exist';
            } else {
                this.error = '';
            }
        } else {
            this.error = '';
        }
    } else if (error) {
        this.error = 'Error fetching contacts';
    }
}
    
  // ssn validation end

      
// Sign start 

closeSignaturePopup() {
    this.showPopup = false;
}

renderedCallback() {
        if (this.showPopup) {
            this.initCanvas();
        }
    }
     openSignaturePopup() {

        this.showPopup = true;
       // this.initCanvas();
    }
    connectedCallback() {
        // Call the method to set the current date and time when the component initializes
        this.setCurrentDate();
    }

    setCurrentDate() {
        // Get the current date and time
        this.currentDate = new Date().toLocaleString();
    }

    // Other methods in your component...

    // Example method to update the current date and time
    handleRefreshDate() {
        this.setCurrentDate();
    }

    
    

    initCanvas() {
        const canvas = this.template.querySelector('.signatureCanvas');
        //console.log("canvas:", canvas);
        if (canvas) {
        this.ctx = canvas.getContext('2d');
        this.ctx.lineWidth = 2;
        this.ctx.strokeStyle = '#000000';

        canvas.addEventListener('mousedown', this.handleMouseDown.bind(this));
        canvas.addEventListener('mousemove', this.handleMouseMove.bind(this));
        canvas.addEventListener('mouseup', this.handleMouseUp.bind(this));
        }
    }

    handleMouseDown(event) {
        const { offsetX, offsetY } = event;
        this.ctx.beginPath();
        this.ctx.moveTo(offsetX, offsetY);
        this.drawing = true;
    }

    handleMouseMove(event) {
        if (this.drawing) {
            const { offsetX, offsetY } = event;
            this.ctx.lineTo(offsetX, offsetY);
            this.ctx.stroke();
        }
    }

    handleMouseUp() {
          this.drawing = false;
          const canvas = this.template.querySelector('.signatureCanvas');
          this.signatureData = canvas.toDataURL();

    }

    clearSignature() {
        const canvas = this.template.querySelector('.signatureCanvas');
        const ctx = canvas.getContext('2d');
        ctx.clearRect(0, 0, canvas.width, canvas.height);
        this.signatureData =null;
    }
// Sign end

 handleCheckboxChange(event) {
        this.Totalcontamount = 0; 
        const checkedValue = event.target.value;
        const isChecked = event.target.checked;

        if (isChecked) {
            // If checkbox is checked, add the value to the selectedValues array
            this.selectedValues.push(checkedValue);
        } else {
            // If checkbox is unchecked, remove the value from the selectedValues array
            const index = this.selectedValues.indexOf(checkedValue);
            if (index !== -1) {
                this.selectedValues.splice(index, 1);
            }
        } 
        // Update accordionItems based on the updated selectedValues
      this.accordionItems = this.generateAccordionItems(this.selectedValues);
    }
 
//connectedCallback() {
//        // Sample data, you can replace this with your actual data
//        this.accordionItems = [
//            {
//                id: '1',
//                title: 'Section 1',
//                inputFields: [{ id: 'input1', label: 'Input 1', value: '' }
//                             ],
//                cssClass: '' // Optional CSS class for styling
//            },
//            {
//                id: '2',
//                title: 'Section 2',
//                inputFields: [{ id: 'input1', label: 'Input 1', value: '' }],
//                cssClass: ''
//            },
//            {
//                id: '3',
//                title: 'Section 3',
//                inputFields: [{ id: 'input1', label: 'Input 1', value: '' }],
//                cssClass: ''
//            }
//        ];
//    }
    
  generateAccordionItems(selectedValues) {
    return selectedValues.map((value, index) => {
        return {
            id: index + 1,
            title: value, // Set title based on selected value
            inputFields: this.generateInputFields(), // Initialize inputFields dynamically
            cssClass: '' // Optional CSS class for styling
        };
    });
}


generateInputFields() {
    // Generate input fields dynamically based on your requirements
    return [
        { id: 'input1', label: 'Input 1',planType: '',
        vendors: '',
        contributionAmount: '',
        contributionPercentage: ''
        //showPercentage: false  Initialize to false to hide Contribution Percentage field initially 
        }
        // Add more input fields as needed
    ];
}

    handleInputChange(event) {
    const sectionId = event.target.dataset.sectionId;
    const fieldId = event.target.dataset.fieldId;
    const fieldType = event.target.dataset.fieldType; // Extracting the field type from the attribute
    const inputValue = event.target.value;    
    const sectionIndex = this.accordionItems.findIndex(item => String(item.id) === String(sectionId));
    const fieldIndex = this.accordionItems[sectionIndex].inputFields.findIndex(field => String(field.id) === String(fieldId));
//console.log("sectionId:", sectionId);
//console.log("fieldId:", fieldId);
//console.log("fieldType:", fieldType);
//console.log("sectionIndex:", sectionIndex);
//console.log("fieldIndex:", fieldIndex);
    // Update the value based on the field type
    switch (fieldType) {
        
        case 'planType':
            this.accordionItems[sectionIndex].inputFields[fieldIndex].planType = inputValue;
            break;
        case 'vendors':
            this.accordionItems[sectionIndex].inputFields[fieldIndex].vendors = inputValue;
            break;
        case 'contributionAmount': 
            this.accordionItems[sectionIndex].inputFields[fieldIndex].contributionAmount = inputValue;
            this.calculateTotalContribution();  
            break;
        case 'contributionPercentage': 
            this.accordionItems[sectionIndex].inputFields[fieldIndex].contributionPercentage = inputValue;
            break;
        default:
            break;
    }

    this.accordionItems.forEach(section => {
    console.log('Section ID:', section.id);
    console.log('Section Title:', section.title);
    console.log('Section CSS Class:', section.cssClass);
    
    section.inputFields.forEach(field => {
        console.log('Field ID:', field.id);
        console.log('Field Label:', field.label);
        console.log('Field Plan Type:', field.planType);
        console.log('Field Vendors:', field.vendors);
        console.log('Field Contribution Amount:', field.contributionAmount);
        console.log('Field Contribution Percentage:', field.contributionPercentage);
    });
});
    }
    
calculateTotalContribution() {
        let total = 0;
        this.accordionItems.forEach(section => {
            section.inputFields.forEach(field => {
                total += parseFloat(field.contributionAmount) || 0;
            });
        });
        this.Totalcontamount = total.toFixed(2); // Update the tracked Totalcontamount property
    }
 
  
handleAddInput(event) {
    const sectionId = event.target.dataset.sectionId;
    const sectionIndex = this.accordionItems.findIndex(item => String(item.id) === String(sectionId));
    const newFieldId = 'input' + (this.accordionItems[sectionIndex].inputFields.length + 1);
    // Adding a new input field object with empty values for all types
    this.accordionItems[sectionIndex].inputFields.push({ 
        id: newFieldId, 
        label: 'Input ' + (this.accordionItems[sectionIndex].inputFields.length + 1), 
        planType: '',
        vendors: '',
        contributionAmount: '',
        contributionPercentage: ''
        //showPercentage: false 
    });
}

handleDeleteInput(event) {
    const sectionId = event.target.dataset.sectionId;
    const fieldId = event.target.dataset.fieldId;
    const sectionIndex = this.accordionItems.findIndex(item => String(item.id) === String(sectionId));
    const fieldIndex = this.accordionItems[sectionIndex].inputFields.findIndex(field => String(field.id) === String(fieldId));
    this.accordionItems[sectionIndex].inputFields.splice(fieldIndex, 1);
}
 


     handleFirstNameChange(event) {
        this.firstName = event.target.value;
    }

    handleLastNameChange(event) {
        this.lastName = event.target.value;
        this.checkInputsFilled();

    }

    handleMiddleNameChange(event) {
        this.middleName = event.target.value;
    }

    handleBirthdateChange(event) {
        this.birthdate = event.target.value;
        this.checkInputsFilled();

    }

    handleSSNChange(event) {
        //this.ssn = event.target.value;          
         // Call Apex method to check if SSN exists
        const ssnValue = event.target.value.replace(/\D/g, ''); // Remove non-numeric characters
        this.ssn = ssnValue;
        //console.log("contact", this.ssn);
        const maskedSSN = ssnValue.substring(0, 9); // Ensure max length of 9 digits
        this.formattedSSN = maskedSSN.replace(/(\d{3})(\d{2})(\d{4})/, '$1-$2-$3'); // Apply SSN format with dashes
        
       // if (ssnValue.length > 9) {
       //     this.error = 'SSN cannot be longer than 9 digits';
       // } else {
       //     this.error = '';
       // }
       this.checkInputsFilled();
       
    } 

    handleEmailChange(event) {
        this.email = event.target.value;
    }

    handlePhoneChange(event) {
        this.phone = event.target.value;
    }

    handleMailingStreetChange(event) {
        this.mailingStreet = event.target.value;
    }

    handleMailingCityChange(event) {
        this.mailingCity = event.target.value;
    }

    handleMailingStateChange(event) {
        this.mailingState = event.target.value;
    }

    handleMailingPostalCodeChange(event) {
        this.mailingPostalCode = event.target.value;
    }

    handleMailingCountryChange(event) {
        this.mailingCountry = event.target.value;
    }
      handlePlanIdChange(event) {
        this.planNumber = event.target.value;
        
    }

    checkInputsFilled() {
    this.isInputsFilled = this.lastName && this.birthdate && this.ssn;
}
    
    @wire(getPlantype, { planNumber: '$planNumber' })
    wiredAccount({ error, data }) {
        if (data) {
            this.account = data;
            this.picklistValues = this.account.Plan_type1__c.split(';');
        } else if (error) {
            console.error('Error fetching Account:', error);
        }
    }
    //@track contributionAmount;
    //@track contributionPercentage;
    //@track showContributionAmount = true;
//
    //handleContributionAmountChange(event) {
    //    this.contributionAmount = event.target.value;
//
    //    // Show Contribution Percentage field if Contribution Amount is entered
    //    this.showContributionAmount = !this.contributionAmount;
    //}
//
    //handleContributionPercentageChange(event) {
    //    this.contributionPercentage = event.target.value;
//
    //    // Hide Contribution Percentage field if Contribution Percentage is entered
    //    this.showContributionAmount = !this.contributionPercentage;
    //}

    

    handleSave() {
    const fields = {
        FirstName: this.firstName,
        LastName: this.lastName,
        MiddleName: this.middleName,
        Birthdate: this.birthdate,
        SSN__c: this.ssn,
        Email: this.email,
        Phone: this.phone,
        MailingStreet: this.mailingStreet,
        MailingCity: this.mailingCity,
        MailingState: this.mailingState,
        MailingPostalCode: this.mailingPostalCode,
        MailingCountry: this.mailingCountry
    };

    const recordInput = { apiName: CONTACT_OBJECT.objectApiName, fields };

    createRecord(recordInput)
       .then(contact => {
            this.contactId = contact.id; // Store the contact ID
            this.message = contact;
            this.error = undefined;
            if(this.message !== undefined) {                    
                this.dispatchEvent(
                    new ShowToastEvent({
                        title: 'Success',
                        message: 'Contact created',
                        variant: 'success',
                    }),
                );
            }
            
            console.log(JSON.stringify(contact));
            console.log("contact", this.message);

            // After contact creation, insert election data
            this.insertElectionData(); // Election insert
             this.saveSignature(); // Sign document
        })
        .catch(error => {
            this.message = undefined;
            this.error = error;
            this.dispatchEvent(
                new ShowToastEvent({
                    title: 'Error creating record',
                    message: error.body.message,
                    variant: 'error',
                }),
            );
            console.log("error", JSON.stringify(this.error));
        });
}


insertElectionData() {
    const electionRecords = [];

    this.accordionItems.forEach(section => {
        section.inputFields.forEach(field => {
           const electionRecord = {
                sobjectType: 'Election_Object__c',
                Name: 'Test',
                Contact__c: this.contactId, // Use the stored contact ID
                plantype__c: section.title,
                Contribution_Type__c: field.planType,
                Vendor__c: field.vendors,
                Contribution_Amount__c: field.contributionAmount,
                Contribution_Percentage__c: field.contributionPercentage
            };
            electionRecords.push(electionRecord); 
           
        });
    });
    
    // Optionally, log the election records to be inserted
    console.log('Election Records to be inserted:', electionRecords);

    // Log the election records to be inserted
    console.log('Election Records to be inserted:', JSON.stringify(electionRecords, null, 2));

    // Call the Apex method to insert election records
    insertElectionRecords({electionRecords})
        .then(result => {
            // Handle success
            console.log('Election records inserted successfully:', JSON.stringify(result));
            this.dispatchEvent(
                new ShowToastEvent({
                    title: 'Success',
                    message: 'Election records inserted successfully',
                    variant: 'success',
                }),
            );
        })
        .catch(error => {
            // Handle error
            console.error('Error inserting election records:', error);
            console.error('Error inserting election records:', JSON.stringify(error,null,2));
            this.dispatchEvent(
                new ShowToastEvent({
                    title: 'Error inserting election records',
                    message: error.body.message,
                    variant: 'error',
                }),
            );
        });
}

    saveSignature() {
        const canvas = this.template.querySelector('.signatureCanvas');
        //const signatureData = canvas.toDataURL();
        console.log('signatureData:', this.signatureData);
        console.log('contactId:', this.contactId);

        // Call Apex method to save the signature data to Contact object
        saveSignatureData({ contactId: this.contactId, signatureData: this.signatureData })
            .then(result => {
                // Handle success
                console.log('Signature saved successfully:', result);
                this.showPopup = false;
            })
            .catch(error => {
                // Handle error
                console.error('Error saving signature:', error);
                // Optionally display an error message to the user
            });
    }
 
// Js Properties for first picklist
    @track planType = 'Pre-Tax Deferral'; 
    @track planOptions = [];

    @wire(getFirstPicklistValues)
    wiredFirstPicklistValues({ error, data }) {
        if (data) {
            this.planOptions = data.map(option => ({
                label: option,
                value: option
            }));
        } else if (error) {
            console.error('Error fetching first picklist values: ', error);
        }
    }

  // Js Properties for second picklist
    @track secondPlanType = ''; 
    @track secondPlanOptions = [];

    @wire(getSecondPicklistValues)
    wiredSecondPicklistValues({ error, data }) {
        if (data) {
            this.secondPlanOptions = data.map(option => ({
                label: option,
                value: option
            }));
        } else if (error) {
            console.error('Error fetching second picklist values: ', error);
        }
    }
    
    // Js Properties checkbox "I/We agree"
    @track isChecked = false;
    @track isChecked1 = false;

    get isCheckboxNotChecked() {
        return !this.isChecked;
    }

    
    get isCheckboxNotChecked1() {
        return !this.isChecked1;
    }

    handleChange(event) {
        this.isChecked = event.target.checked;
    }

      handleTabChange(event) {
        // This prevents the tab from changing
        event.preventDefault();
    }

    // Js Properties start
     @track activeTab = '1';

    get bDisableBackBtn(){
        if (Number(this.activeTab) == 1 || Number(this.activeTab) == 4){return true;}
        else{return false;}
        //return Number(this.activeTab) == 1 ? true : false;
    }
    get bDisableNextBtn(){
        return Number(this.activeTab) == 4 ? true : false;
    }
    // JS functions start 
    handleActive(event) {
     this.activeTab = event.target.value;
    }
    
    goBack(){
        //this.disableTabSwitch = false;
        let activeTabValue = Number(this.activeTab) - 1;
        this.activeTab = activeTabValue.toString();
      }
    
    goNext(){   
        // validate ssn,last name and dob  
        //this.disableTabSwitch = false;
        if (!this.firstName || !this.lastName  || !this.ssn   ) {
            // Alert the user or display an error message
            // For example, you can use showToast() method to show a toast message
            this.showToast('Error', 'Please enter  First Name and Last Name and SSN and Employer Id', 'error');
            return;
        }      
         //console.log("lastFiveDigits:", this.ssn.substr(this.ssn.length - 4));  
         console.log("Error:", this.error);
          if (this.error) {                
            this.showToast('Error', 'SSN already exist.Please login', 'error');
            return;
        } 

    let activeTabValue = Number(this.activeTab) + 1;
    this.activeTab = activeTabValue.toString();   // Add this line for debugging
     //console.log('New Active Tab after increment:', this.activeTab);     
    //console.log('Entering goNext() function');   
    if (this.activeTab === '4') { // Change 'tab4' to the value of your 4th tab
          this.handleSave();   
        } 

    
        
    }
      showToast(title, message, variant) {
        const evt = new ShowToastEvent({
            title: title,
            message: message,
            variant: variant
        });
        this.dispatchEvent(evt);
      
    }
    // JS functions end  

  
     // Getter to determine the label for the next button based on the active tab
    get nextButtonLabel() { 
        if (this.activeTab === '3') { // Change 'tab3' to the value of your 3rd tab
            return 'Submit';
        } else if (this.activeTab === '4') { // Change 'tab4' to the value of your 4th tab
            return 'Finish';
        } else {
            return 'Next';
        }
    }
}
/////////////
<template>    
    <lightning-card>
        <!--Group Of lightning Tab Set-->
    <lightning-tabset variant="scoped" active-tab-value={activeTab} onselect={handleTabChange} >
         <div class="slds-m-around_x-small">
            <lightning-tab label="Personal information"  value="1" onactive={handleActive} >
              <div class="container">
                  <b> <h2>Personal Information</h2></b>
        <div class="row">
            <div class="field">
               <legend class="slds-form-element__legend slds-form-element__label">First Name</legend>
                <lightning-input variant="label-hidden" label="First Name" type="text" value={firstName} onchange={handleFirstNameChange} class="small-input" required></lightning-input>
            </div>
            <div class="field">
                <lightning-input label="Last Name" type="text" value={lastName} onchange={handleLastNameChange} class="small-input" required></lightning-input>
            </div>
			<div class="field">
                <lightning-input label="Middle Name" type="text" value={middleName} onchange={handleMiddleNameChange} class="small-input"></lightning-input>
            </div>
              <div class="field">
                <lightning-input label="Phone" type="tel" value={phone} onchange={handlePhoneChange} class="small-input"></lightning-input>
            </div>
        </div>
		
        <div class="row"> 
             <div class="field">
                <lightning-input label="Email" type="email" value={email} onchange={handleEmailChange} class="large-input"></lightning-input>
            </div>
		   <div class="field">
                <lightning-input label="Date of Birth" type="date" value={birthdate} onchange={handleBirthdateChange} class="medium-input"></lightning-input>
            </div>
            <div class="field">
                <lightning-input label="SSN" value={formattedSSN} onchange={handleSSNChange}  class="medium-input" maxlength="11" required ></lightning-input>
                <template if:true={error}>
                <p class="slds-text-color_error">{error}</p>
            </template>
            </div> 
			<div class="field">
                <lightning-input label="Employer ID" type="text" value={planId} onchange={handlePlanIdChange} class="medium-input"  required></lightning-input>
            </div>
           </div>
          
               
          </div>  
         
              <div class="address-info">
       <b> <h2>Address Information</h2></b>
		 <div class="row1"> 
		 <div class="field">
                <lightning-input label="Street" value={mailingStreet} onchange={handleMailingStreetChange} class="large-input"></lightning-input>
         </div>
		 <div class="field">
               <lightning-input label="City" value={mailingCity} onchange={handleMailingCityChange} class="medium-input"></lightning-input>
         </div>
		 <div class="field">
                <lightning-input label="State" value={mailingState} onchange={handleMailingStateChange} class="medium-input"></lightning-input>
         </div>
          <div class="field">
               <lightning-input label="Country" value={mailingCountry} onchange={handleMailingCountryChange} class="medium-input"></lightning-input>
         </div>	</div>
          <div class="row1">
		 <div class="field">
                <lightning-input label="Zip" value={mailingPostalCode} onchange={handleMailingPostalCodeChange} class="medium-input"></lightning-input>
         </div>
		 
		   </div>
         </div>          
            </lightning-tab>
           
            <!--<lightning-tab label="Upload"  value="2" onactive={handleActive}>
                Contact Dummy Data...
            </lightning-tab>--> 
         
            <lightning-tab label="Plan Selection"  value="2" onactive={handleActive}  >  
                <lightning-card title="Which Plan Are You Enrolling In?"> 
                    <template for:each={picklistValues} for:item="value">
        <div key={value}>                    
               <lightning-input type="checkbox" id={value} label= {value} value={value} checked={checked} onchange={handleCheckboxChange} ></lightning-input>            
               
        </div>
    </template>

                </lightning-card> 
           </lightning-tab>
 








          
             <lightning-tab label="Plan Information"  value="3" onactive={handleActive} >
             How much would you like to contribute?
                <div class="field">
                <lightning-input label="Estimated salary" type="tel" value={salary} onchange={handleSalaryChange} class="small-input"></lightning-input>
            </div>

            <!-- Radio buttons for contribution type -->
                        <div class="field">
                            <lightning-radio-group label="Do you want to contribute in" value={contributionType} options={contributionOptions} onchange={handleContributionTypeChange}></lightning-radio-group>
                        </div>

 <!--  <div class="field">
        <lightning-input label="Contribution Amount" type="tel" value={contributionAmount} onchange={handleContributionAmountChange} class="small-input"></lightning-input>
    </div>

    c Contribution Percentage Input Field (conditionally rendered) 
    <template if:true={showContributionAmount}>
        <div class="field">
            <lightning-input label="Contribution Percentage" type="tel" value={contributionPercentage} onchange={handleContributionPercentageChange} class="small-input"></lightning-input>
        </div>
    </template>-->
 <!--<lightning-layout>
    <lightning-layout-item size="3" class="slds-col">
        <lightning-combobox label="Plan Type" value={planType} options={planOptions} onchange={handlePlanTypeChange}></lightning-combobox>
    </lightning-layout-item>
    <lightning-layout-item size="3" class="slds-col">
        <lightning-combobox label="Vendors" value={secondPlanType} options={secondPlanOptions} onchange={handlevendorTypeChange}></lightning-combobox>
    </lightning-layout-item>
    <lightning-layout-item size="3" class="slds-col">
        <lightning-input label="Contribution Amount" type="tel" value={Amount} onchange={handleContributionAmountChange} class="small-input"></lightning-input>
    </lightning-layout-item>OR
    <lightning-layout-item size="3" class="slds-col">
        <lightning-input label="Contribution Percentage" type="tel" value={salary} onchange={handleContributionPercentageChange} class="small-input"></lightning-input>
    </lightning-layout-item>
</lightning-layout>-->
 <!-- Render existing input fields PK-->
 <lightning-accordion allow-multiple-sections-open={allowMultipleSectionsOpen}>
    <template for:each={accordionItems} for:item="item">
        <lightning-accordion-section key={item.id} name={item.id} label={item.title} class={item.cssClass}>
            <div class="slds-box slds-m-around_small">
                <!-- Render input fields dynamically -->
                <template for:each={item.inputFields} for:item="inputField" for:index="index">
                    <div key={inputField.id}>
                        <lightning-layout>
                            <lightning-layout-item size="3" class="slds-col">
                                <lightning-combobox label="Plan Type" options={planOptions} onchange={handleInputChange} data-field-id={inputField.id} data-field-type="planType" data-section-id={item.id}></lightning-combobox>
                            </lightning-layout-item>
                            <lightning-layout-item size="3" class="slds-col">
                                <lightning-combobox label="Vendors" options={secondPlanOptions} onchange={handleInputChange} data-field-id={inputField.id} data-field-type="vendors" data-section-id={item.id}></lightning-combobox>
                            </lightning-layout-item> 
                            
                           <lightning-layout-item size="3" class="slds-col" >
                                <lightning-input label="Contribution Amount" onchange={handleInputChange} class="small-input" data-field-id={inputField.id} data-field-type="contributionAmount" data-section-id={item.id} type="number" step="0.01" formatter="currency" formatter-style="currency" currency-code="USD" ></lightning-input>
                            </lightning-layout-item>  
                                                         
                          OR <lightning-layout-item size="3" class="slds-col">
                                <lightning-input label="Contribution Percentage" onchange={handleInputChange} class="small-input" data-field-id={inputField.id} data-field-type="contributionPercentage" data-section-id={item.id} type="number" step="0.01" formatter="percent"></lightning-input>
                            </lightning-layout-item> 
                                                               
                        </lightning-layout>
                        <lightning-button-icon icon-name="utility:delete" alternative-text="Delete" title="Delete" onclick={handleDeleteInput} data-field-id={inputField.id} data-section-id={item.id}></lightning-button-icon>
                    </div>
                </template>
                <!-- Button to add input field -->
                <lightning-button label="Add Input Field" onclick={handleAddInput} data-section-id={item.id}></lightning-button>
               
            </div>
        </lightning-accordion-section>
    </template>
</lightning-accordion>
  <!-- Button to add more input fields PK -->   
           <div class="field"> <lightning-input label="Total Contribution Amount" type="number" step="0.01" formatter="currency" formatter-style="currency" currency-code="USD" value={Totalcontamount}  readonly class="small-input"></lightning-input>
               
                 
            </div>  

            Review and Accept<br /><br />
           <div>
            By clicking on "I/We agree". You authorize us to verify the information you submitted and to manage the plan on your behalf. Upon your request, we will provide further 
            information regarding this plan. You Warranty to us that the information you are submitting is true and correct.    </div><br /><br />
         <div class="field"><label>
                <input type="checkbox" checked={isChecked} onchange={handleChange} />
                         I/We agree
                               </label>
                      <template if:true={isCheckboxNotChecked}>
                 <span style="color: red;">*</span>
               </template></div>
            <!--<div class="field">
                <lightning-button variant="brand" label="Sign Document" onclick={redirectToSignaturePage}></lightning-button>
            </div> -->
           
             <lightning-button label="Sign" onclick={openSignaturePopup}></lightning-button>
                <div class="signaturePopup" if:true={showPopup}>
                    
                    <div class="signatureHeader1"><b>Assessment Signature</b></div></br>
                    <div class="signatureHeader">Draw Your Signature on the canvas</div>
                     
                        <div class="signaturePopupHeader">
                            <lightning-button-icon icon-name="utility:close" alternative-text="Close" onclick={closeSignaturePopup}></lightning-button-icon>
                        </div>
                         <div class="pops">
       
    </div>
                       
                    <canvas class="signatureCanvas" width="400" height="200"></canvas>
                   
                        <div class="dateTime">
        <p>{currentDate}</p>
         <lightning-button label="Clear" onclick={clearSignature}></lightning-button>
    </div></br> 
     <div class="field"><label>
                <input type="checkbox" checked={isChecked1} onchange={handleChange1} />
                         By Signing electronically, I agree that the signature digital representation of my consent to the information provided with this form.
                               </label>
                      <template if:true={isCheckboxNotChecked1}>
                 <span style="color: red;">*</span>
               </template></div></br>
               
                  <!--  <lightning-button label="Save" onclick={saveSignature}></lightning-button> -->
                </div>
            
            </lightning-tab> 


            <lightning-tab label="Application Complete!"  value="4" onactive={handleActive} >
                 
             Your enrollment has been successfully submitted.Click Finish to return to view further information about your plan.</lightning-tab> 

        </div>
    </lightning-tabset>
    
     <div class="row">
            <div class="field">
                <lightning-button variant="brand" label="Save for later" onclick={handleSave}></lightning-button>
            </div>
       
    <!--Navigation Button on card footer-->
    <div slot="footer">     
        <template if:false={shouldHideButton}>         
        <lightning-button variant="brand" label="Back" disabled={bDisableBackBtn} onclick={goBack}></lightning-button>
        </template>
        <lightning-button variant="brand" label={nextButtonLabel} disabled={bDisableNextBtn} onclick={goNext} class="slds-m-left_x-small">  </lightning-button>
         
            <!-- <template if:true={showSSNError}>
                <div class="slds-text-color_error">SSN is required</div>
            </template>-->
      
    </div>
     </div>
</lightning-card>
</template>