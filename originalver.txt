import { LightningElement,api,track,wire } from 'lwc';
import { createRecord } from 'lightning/uiRecordApi'; 
import getFirstPicklistValues from '@salesforce/apex/ObjectNameController.getPicklistValues';
import getSecondPicklistValues from '@salesforce/apex/myvendorpicklistvalues.getPicklistValues';

import getPlantype from '@salesforce/apex/AccountController.getPlantype';
import CONTACT_OBJECT from '@salesforce/schema/Contact';
import { ShowToastEvent } from 'lightning/platformShowToastEvent'; 
export default class TabWithNavigation extends LightningElement {
    @track accordionItems = [];
    //@track selecedCheckboxes = [];
    allowMultipleSectionsOpen = true; // Set to false if you want only one section to be open at a time
    @api planNumber;
    account;
    picklistValues = [];    
    @track selectedValues = [];

   //constructor() {
   //    super();
   //    this.selectedValues = []; // Initialize selectedValues array
   //    this.accordionItems = [];
   //}

    //value = [];
    @track firstName;
    @track lastName;
    @track middleName;
    @track birthdate;
    @track ssn;
   // @track planId;
    @track email;
    @track phone;
    @track mailingStreet;
    @track mailingCity;
    @track mailingState;
    @track mailingPostalCode;
    @track mailingCountry; 

   

   // handleChange1(event) {
   //     // Handle checkbox change
   // }
//
   // getImage(value) {
   //     // Return image URL based on value
   // }
//
   // isChecked(value) {
   //     // Return true if value is checked
   // }

   // handlePlanNumberChange(event) {
   //    this.selecedCheckboxes = event.detail.value; 
   //    
   //}

 handleCheckboxChange(event) {
        const checkedValue = event.target.value;
        const isChecked = event.target.checked;

        if (isChecked) {
            // If checkbox is checked, add the value to the selectedValues array
            this.selectedValues.push(checkedValue);
        } else {
            // If checkbox is unchecked, remove the value from the selectedValues array
            const index = this.selectedValues.indexOf(checkedValue);
            if (index !== -1) {
                this.selectedValues.splice(index, 1);
            }
        } 
        // Update accordionItems based on the updated selectedValues
      this.accordionItems = this.generateAccordionItems(this.selectedValues);
    }
 
//connectedCallback() {
//        // Sample data, you can replace this with your actual data
//        this.accordionItems = [
//            {
//                id: '1',
//                title: 'Section 1',
//                inputFields: [{ id: 'input1', label: 'Input 1', value: '' }
//                             ],
//                cssClass: '' // Optional CSS class for styling
//            },
//            {
//                id: '2',
//                title: 'Section 2',
//                inputFields: [{ id: 'input1', label: 'Input 1', value: '' }],
//                cssClass: ''
//            },
//            {
//                id: '3',
//                title: 'Section 3',
//                inputFields: [{ id: 'input1', label: 'Input 1', value: '' }],
//                cssClass: ''
//            }
//        ];
//    }
    
  generateAccordionItems(selectedValues) {
    return selectedValues.map((value, index) => {
        return {
            id: index + 1,
            title: value, // Set title based on selected value
            inputFields: this.generateInputFields(), // Initialize inputFields dynamically
            cssClass: '' // Optional CSS class for styling
        };
    });
}


generateInputFields() {
    // Generate input fields dynamically based on your requirements
    return [
        { id: 'input1', label: 'Input 1', value: '' }
        // Add more input fields as needed
    ];
}
    handleInputChange(event) {
    const sectionId = event.target.dataset.sectionId;
    const fieldId = event.target.dataset.fieldId;
    const fieldType = event.target.dataset.fieldType; // Extracting the field type from the attribute
    const inputValue = event.target.value;    
    const sectionIndex = this.accordionItems.findIndex(item => String(item.id) === String(sectionId));
    const fieldIndex = this.accordionItems[sectionIndex].inputFields.findIndex(field => String(field.id) === String(fieldId));
console.log("sectionId:", sectionId);
console.log("fieldId:", fieldId);
console.log("fieldType:", fieldType);
console.log("sectionIndex:", sectionIndex);
console.log("fieldIndex:", fieldIndex);
    // Update the value based on the field type
    switch (fieldType) {
        case 'planType':
            this.accordionItems[sectionIndex].inputFields[fieldIndex].planType = inputValue;
            break;
        case 'vendors':
            this.accordionItems[sectionIndex].inputFields[fieldIndex].vendors = inputValue;
            break;
        case 'contributionAmount':
            this.accordionItems[sectionIndex].inputFields[fieldIndex].contributionAmount = inputValue;
            break;
        case 'contributionPercentage':
            this.accordionItems[sectionIndex].inputFields[fieldIndex].contributionPercentage = inputValue;
            break;
        default:
            break;
    }
}

handleAddInput(event) {
    const sectionId = event.target.dataset.sectionId;
    const sectionIndex = this.accordionItems.findIndex(item => String(item.id) === String(sectionId));
    const newFieldId = 'input' + (this.accordionItems[sectionIndex].inputFields.length + 1);
    // Adding a new input field object with empty values for all types
    this.accordionItems[sectionIndex].inputFields.push({ 
        id: newFieldId, 
        label: 'Input ' + (this.accordionItems[sectionIndex].inputFields.length + 1), 
        planType: '',
        vendors: '',
        contributionAmount: '',
        contributionPercentage: ''
    });
}

handleDeleteInput(event) {
    const sectionId = event.target.dataset.sectionId;
    const fieldId = event.target.dataset.fieldId;
    const sectionIndex = this.accordionItems.findIndex(item => String(item.id) === String(sectionId));
    const fieldIndex = this.accordionItems[sectionIndex].inputFields.findIndex(field => String(field.id) === String(fieldId));
    this.accordionItems[sectionIndex].inputFields.splice(fieldIndex, 1);
}
 


     handleFirstNameChange(event) {
        this.firstName = event.target.value;
    }

    handleLastNameChange(event) {
        this.lastName = event.target.value;
    }

    handleMiddleNameChange(event) {
        this.middleName = event.target.value;
    }

    handleBirthdateChange(event) {
        this.birthdate = event.target.value;
    }

    handleSSNChange(event) {
        this.ssn = event.target.value;
         // Call Apex method to check if SSN exists
        
    
    }

  

    handleEmailChange(event) {
        this.email = event.target.value;
    }

    handlePhoneChange(event) {
        this.phone = event.target.value;
    }

    handleMailingStreetChange(event) {
        this.mailingStreet = event.target.value;
    }

    handleMailingCityChange(event) {
        this.mailingCity = event.target.value;
    }

    handleMailingStateChange(event) {
        this.mailingState = event.target.value;
    }

    handleMailingPostalCodeChange(event) {
        this.mailingPostalCode = event.target.value;
    }

    handleMailingCountryChange(event) {
        this.mailingCountry = event.target.value;
    }
      handlePlanIdChange(event) {
        this.planNumber = event.target.value;
        
    }
    
    @wire(getPlantype, { planNumber: '$planNumber' })
    wiredAccount({ error, data }) {
        if (data) {
            this.account = data;
            this.picklistValues = this.account.Plan_type1__c.split(';');
        } else if (error) {
            console.error('Error fetching Account:', error);
        }
    }
 @track contributionAmount;
    @track contributionPercentage;
    @track showContributionAmount = true;

    handleContributionAmountChange(event) {
        this.contributionAmount = event.target.value;

        // Show Contribution Percentage field if Contribution Amount is entered
        this.showContributionAmount = !this.contributionAmount;
    }

    handleContributionPercentageChange(event) {
        this.contributionPercentage = event.target.value;

        // Hide Contribution Percentage field if Contribution Percentage is entered
        this.showContributionAmount = !this.contributionPercentage;
    }

    

    handleSave() {
        const fields = {
            FirstName: this.firstName,
            LastName: this.lastName,
            MiddleName: this.middleName,
            Birthdate: this.birthdate,
            SSN__c: this.ssn,
           // PlanId__c: this.planId,
            Email: this.email,
            Phone: this.phone,
            MailingStreet: this.mailingStreet,
            MailingCity: this.mailingCity,
            MailingState: this.mailingState,
            MailingPostalCode: this.mailingPostalCode,
            MailingCountry: this.mailingCountry
            
        };

        const recordInput = { apiName: CONTACT_OBJECT.objectApiName, fields };

        createRecord(recordInput)
           .then(contact => {
                this.message = contact;
                this.error = undefined;
                if(this.message !== undefined) {                    
                    this.dispatchEvent(
                        new ShowToastEvent({
                            title: 'Success',
                            message: 'Contact created',
                            variant: 'success',
                        }),
                    );
                }
                
                console.log(JSON.stringify(contact));
                console.log("contact", this.message);
            })
             .catch(error => {
                this.message = undefined;
                this.error = error;
                this.dispatchEvent(
                    new ShowToastEvent({
                        title: 'Error creating record',
                        message: error.body.message,
                        variant: 'error',
                    }),
                );
                console.log("error", JSON.stringify(this.error));
            });
    }

 
// Js Properties for first picklist
    @track planType = 'Pre-Tax Deferral'; 
    @track planOptions = [];

    @wire(getFirstPicklistValues)
    wiredFirstPicklistValues({ error, data }) {
        if (data) {
            this.planOptions = data.map(option => ({
                label: option,
                value: option
            }));
        } else if (error) {
            console.error('Error fetching first picklist values: ', error);
        }
    }

  // Js Properties for second picklist
    @track secondPlanType = ''; 
    @track secondPlanOptions = [];

    @wire(getSecondPicklistValues)
    wiredSecondPicklistValues({ error, data }) {
        if (data) {
            this.secondPlanOptions = data.map(option => ({
                label: option,
                value: option
            }));
        } else if (error) {
            console.error('Error fetching second picklist values: ', error);
        }
    }
    
    // Js Properties checkbox "I/We agree"
    @track isChecked = false;
    
    get isCheckboxNotChecked() {
        return !this.isChecked;
    }
    handleChange(event) {
        this.isChecked = event.target.checked;
    }

    // Js Properties start
     @track activeTab = '1';

    get bDisableBackBtn(){
        return Number(this.activeTab) == 1 ? true : false;
    }
    get bDisableNextBtn(){
        return Number(this.activeTab) == 4 ? true : false;
    }
    // JS functions start 
    handleActive(event) {
     this.activeTab = event.target.value;
    }
    
    goBack(){
        let activeTabValue = Number(this.activeTab) - 1;
        this.activeTab = activeTabValue.toString();
      }
    
    goNext(){ 
        if (!this.firstName || !this.lastName  || !this.ssn   ) {
            // Alert the user or display an error message
            // For example, you can use showToast() method to show a toast message
            this.showToast('Error', 'Please enter  First Name and Last Name and SSN and Employer Id', 'error');
            return;
        }      
    let activeTabValue = Number(this.activeTab) + 1;
    this.activeTab = activeTabValue.toString();   // Add this line for debugging
     //console.log('New Active Tab after increment:', this.activeTab);     
    //console.log('Entering goNext() function');      
    }
      showToast(title, message, variant) {
        const evt = new ShowToastEvent({
            title: title,
            message: message,
            variant: variant
        });
        this.dispatchEvent(evt);
      
    }
    // JS functions end    
}